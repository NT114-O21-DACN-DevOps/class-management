pipeline {
    agent any
    environment {
        TRIVY_CACHE_DIR = "${WORKSPACE}/trivy-cache"
        TMPDIR = "${WORKSPACE}/trivy-tmp"
    }
    stages {
        stage('Authenticate with Docker Hub') {
            steps {
                withDockerRegistry(credentialsId: 'dockerhub-account', url: 'https://index.docker.io/v1/') {
                    echo 'Logged in to Docker Hub'
                }
            }
        }
        stage('Set up database') {
            steps {
                echo 'Setting up databases...'
                sh '''
                    docker compose -f docker-compose.yml build student-service-mysql
                    docker compose -f docker-compose.yml build auth-service-mysql
                    docker compose -f docker-compose.yml build mongodb
                    docker compose -f docker-compose.yml build postgresql
                '''
            }
        }
        stage('Set up admin tools') {
            steps {
                echo 'Setting up admin tools...'
                sh '''
                    docker compose -f docker-compose.yml build auth-phpmyadmin
                    docker compose -f docker-compose.yml build student-phpmyadmin
                    docker compose -f docker-compose.yml build mongo-express
                    docker compose -f docker-compose.yml build pgadmin
                '''
            }
        }
        stage('Build back-end application images') {
            steps {
                echo 'Building back-end application images...'
                sh '''
                    docker compose -f docker-compose.yml build class-mangement-auth-service
                    docker compose -f docker-compose.yml build class-management-student-service
                    docker compose -f docker-compose.yml build class-management-lecturer-service
                    docker compose -f docker-compose.yml build class-management-class-service
                '''
            }
        }
        stage('Build front-end application image') {
            steps {
                echo 'Building front-end application image...'
                sh '''
                    docker compose -f docker-compose.yml build class-mangement-fe
                '''
            }
        }
        stage('Scan images with Trivy') {
            steps {
                script {
                    def images = [
                        'th1enlm02/class-management-auth-service',
                        'th1enlm02/class-management-student-service',
                        'th1enlm02/class-management-lecturer-service',
                        'th1enlm02/class-management-class-service',
                        'th1enlm02/class-management-fe'
                    ]

                    // Ensure the file exists and is writable
                    def reportFile = "${WORKSPACE}/trivy-report.txt"
                    sh "touch ${reportFile}"
                    sh "chmod +w ${reportFile}"

                    // Perform Trivy scan for each image
                    images.each { imageName ->
                        sh "TRIVY_CACHE_DIR=${env.TRIVY_CACHE_DIR} TMPDIR=${TMPDIR} trivy image --scanners vuln --severity HIGH,CRITICAL ${imageName} >> ${reportFile}"
                    }
                }
            }
        }
        stage('Push images to Docker Hub') {
            steps {
                withDockerRegistry(credentialsId: 'dockerhub-account', url: 'https://index.docker.io/v1/') {
                    echo 'Pushing images to Docker Hub...'
                    sh 'docker compose push'
                }
            }
        }
        stage('Clean and Deploy to Dev Environment') {
            steps {
                echo 'Listing images and containers...'
                sh 'docker images'
                sh 'docker compose ps'

                echo 'Cleaning...'
                sh 'docker compose down -v'
                sh 'echo y | docker container prune'
                sh 'docker compose ps'

                echo 'Deploying to Dev Environment...'
                sh 'docker compose up -d'
                sh 'docker compose ps'
                sh 'docker network ls'
                sh 'docker volume ls'
            }
        }
    }
    post {
        always {
            echo 'Cleaning...'
            sh 'docker logout'
            // cleanWs()
        }
        success {
            echo 'Deployment to Dev Environment is successful!'
            emailext from: 'tranchucthienmt@gmail.com',
                     to: 'tranchucthienmt@gmail.com',
                     subject: "Pipeline Success: ${currentBuild.fullDisplayName}",
                     body: "Pipeline completed successfully. Find attached Trivy report.",
                     attachmentsPattern: 'trivy-report.txt'
        }
        failure {
            echo 'Deployment to Dev Environment failed!'
            emailext from: 'tranchucthienmt@gmail.com',
                     to: 'tranchucthienmt@gmail.com',
                     subject: "Pipeline Failure: ${currentBuild.fullDisplayName}",
                     body: "Pipeline failed. Please check the logs for details.",
                     attachmentsPattern: 'trivy-report.txt'
        }
        unstable {
            echo 'Deployment to Dev Environment is unstable!'
            emailext from: 'tranchucthienmt@gmail.com',
                     to: 'tranchucthienmt@gmail.com',
                     subject: "Pipeline Unstable: ${currentBuild.fullDisplayName}",
                     body: "Pipeline completed but unstable."
        }
        changed {
            echo 'Deployment to Dev Environment is changed!'
            emailext from: 'tranchucthienmt@gmail.com',
                     to: 'tranchucthienmt@gmail.com',
                     subject: "Pipeline Changed: ${currentBuild.fullDisplayName}",
                     body: "Pipeline state changed."
        }
    }
}
